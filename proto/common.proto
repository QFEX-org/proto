syntax = "proto3";

import "google/protobuf/timestamp.proto";
option java_package = "com.qfex.common";
option java_multiple_files = true;
option go_package = "github.com/QFEX-org/proto/common;common";


package common;

message Empty {}

/// This defines how the order is executed by the engine.
enum OrderType {
    LIMIT = 0;                   // Limit order
    MARKET = 1;                  // Market order
    ALO = 3;                     // Add Liquidity Order. If the order would cross the book, the order will be rejected.
}

/// This defines the direction of the order.
enum OrderDirection {
    BUY = 0;                      // Buy order
    SELL = 1;                     // Sell order
}

/// This defines the time in force of the order.
enum OrderTimeInForce {
    GTC = 0;                      // Good till canceled. This order will stay in the book until it is filled or canceled.
    IOC = 1;                      // Immediate or cancel. This order will fill as much as possible and then be canceled. If the order cannot be filled immediately, the remaining quantity will be canceled.
    FOK = 2;                      // Fill or kill. This order will be canceled if it cannot be filled immediately. If the order cannot be filled immediately, the entire order will be canceled.
}

/// Internal definition of the order action.
enum OrderAction {
    NEW = 0;                      // Order was added
    MODIFY = 1;                   // Order was modified
    CANCEL = 2;                   // Order was canceled
    FILL = 4;                     // Order was filled
}


/// This is returned on any order response. This will indicate the current status of the order.
enum OrderStatus {
    ACK = 0;                                    // Order accepted.
    
    FILLED = 2;                                 // Order filled, this could be partially filled.
    MODIFIED = 20;                              // Order successfully modified.
    CANCELLED = 30;                             // Order successfully cancelled.
    CANCELLED_STP = 31;                         // Order cancelled by self trade prevention.
    
    REJECTED = 50;                              // Order rejected   
    NO_SUCH_ORDER = 52;                         // Cancel rejected, no such order exists.
    INVALID_ORDER_TYPE = 53;                    // Invalid order type.
    BAD_SYMBOL = 54;                            // Invalid symbol.
    PRICE_LESS_THAN_MIN_PRICE = 55;             // Price less than minimum price for this symbol.
    PRICE_GREATER_THAN_MAX_PRICE = 56;          // Price greater than maximum price for this symbol.
    CANNOT_MODIFY_PARTIAL_FILL = 58;            // Cannot modify partially filled order. Please cancel your current order and place a new order.
    FAILED_MARGIN_CHECK = 60;                   // Failed margin check. Please check your available balance.
    INVALID_TICK_SIZE_PRECISION_PRICE = 63;     // Invalid tick size for this symbol. Check the price tick size in the reference data.
    INVALID_TICK_SIZE_PRECISION_QUANTITY = 64;  // Invalid lot size for this symbol. Check the lot size in the reference data.
    QUANTITY_LESS_THAN_MIN_QUANTITY = 65;       // Quantity less than minimum for this symbol. Check the minimum quantity in the reference data.
    QUANTITY_GREATER_THAN_MAX_QUANTITY = 66;    // Quantity greater than maximum for this symbol. Check the maximum quantity in the reference data.
    REJECTED_GREATER_THAN_MAX_PRICE_BAND = 67;  // Price greater than max price. Check the max price in the reference data.
    REJECTED_LESS_THAN_MIN_PRICE_BAND = 68;     // Price less than min price. Check the min price in the reference data.
    INVALID_TIME_IN_FORCE = 69;                 // Invalid time in force for this order type.
    REJECTED_WOULD_BREACH_MAX_POSITION = 70;    // Would breach max position. Check the max position for your account in gRPC PortService.GetUserLeverage.
    CANNOT_MODIFY_NO_SUCH_ORDER = 71;           // Failed to modify this order. Order does not exist.
    REJECTED_MARKET_CLOSED = 72;                // QFEX is currently not accepting orders for this symbol.
    RATE_LIMITED = 97;                          // You have sent too many requests to trade.qfex.com. Please contact support@qfex.com to raise your limits.
}

message AckResponse {
    bool success = 1;
    google.protobuf.Timestamp timestamp = 2;
}

message ListRequest {
    int32 limit = 1;
    int32 offset = 2;
}

message TradePublic {
    string trade_id = 1;
    string symbol = 2;
    int64 price = 3;
    int64 quantity = 4;
    google.protobuf.Timestamp order_timestamp = 5;

    common.OrderDirection aggressor_side = 6;
    string buy_order_id = 8;
    string sell_order_id = 9;
    string buy_user_id = 10;
    string sell_user_id = 11;
    int64 buy_fee = 12;
    int64 sell_fee = 13;
}

message GetUserLimitRequest {
    string user_id = 1;
    int32 limit = 2;
    int32 offset = 3; 
} 

message TradesPublic {
    repeated TradePublic trades = 1;
    google.protobuf.Timestamp timestamp = 2;
    int32 count = 3;
}


message UserRequest {
    string user_id = 1;
}

message OrderBookEntry {
    uint64 price = 1;
    uint64 quantity = 2;
}

message OrderBook {
    string symbol = 1;
    google.protobuf.Timestamp timestamp = 2;
    repeated OrderBookEntry bids = 3;
    repeated OrderBookEntry asks = 4;
    uint64 last_traded_price = 5;
    uint64 sequence = 6;
}

message BalancePublic {
    string id = 1;
    string user_id = 2;
    int64 deposit = 3;
    int64 realised_pnl = 4;
    int64 order_margin = 5;
    int64 position_margin = 6;
    int64 unrealised_pnl = 7;
    int64 available_balance = 8;
    int64 net_funding = 9;
    int64 fees = 10;

    bool is_institution = 50;

    google.protobuf.Timestamp timestamp = 99;
}

message AppendOrderRequest {
    string order_id = 1;
    string symbol = 2;
    common.OrderDirection side = 3;
    common.OrderType type = 4;
    common.OrderTimeInForce time_in_force = 5;
    optional common.OrderAction order_action = 6; // NEW/CANCEL/
    uint64 quantity = 7;
    uint64 price = 8;
    string user_id = 10;
    optional uint64 old_quantity = 11;
    optional uint64 old_price = 12;
    string client_order_id = 13;
    uint64 passive_qty = 14;
    
    OrderBookEntry best_bid = 20;
    OrderBookEntry best_ask = 21;
    
    common.OrderStatus order_status = 50;
    optional bool is_passive = 51;

    google.protobuf.Timestamp port_ingress_entry_time = 60;
    google.protobuf.Timestamp port_ingress_exit_time = 61;
    google.protobuf.Timestamp user_service_ingress_entry_time = 62;
    google.protobuf.Timestamp user_service_ingress_exit_time = 63;
    google.protobuf.Timestamp engine_entry_time = 64;
    google.protobuf.Timestamp engine_exit_time = 65;
    google.protobuf.Timestamp user_service_egress_entry_time = 66;
    google.protobuf.Timestamp user_service_egress_exit_time = 67;
    google.protobuf.Timestamp port_egress_entry_time = 68;

    optional string correlation_id = 98;
    google.protobuf.Timestamp timestamp = 99;
}

message Underlier {
    string symbol = 1;
    uint64 price = 2;
    
    google.protobuf.Timestamp timestamp = 99;
}

message FundingRate {
    string symbol = 1;
    int64 rate = 2;
    uint64 time_remaining_seconds = 3;
    
    google.protobuf.Timestamp timestamp = 99;
}

enum SymbolStatus {
    ACTIVE = 0; // Symbol is active.
    INACTIVE = 1; // Symbol is temporarily suspended.
    DELISTED = 2; // Symbol is permanently suspended.
}


message AllOrdersResponse {
    repeated AppendOrderRequest orders = 1;
    google.protobuf.Timestamp timestamp = 2;
    int32 count = 3;
}

message TradeVolume {
    string symbol = 1;
    int64 trade_amount = 2;
    int64 trade_volume = 3;
    int64 price_change = 4;

    google.protobuf.Timestamp timestamp = 99;
}


enum CandlesInterval {
    ONE_MINUTE = 0; // 1 minute candle.
    FIVE_MINUTES = 2; // 5 minute candle.
    FIFTEEN_MINUTES = 3; // 15 minute candle.
    THIRTY_MINUTES = 4; // 30 minute candle.
    ONE_HOUR = 5; // 1 hour candle.
    FOUR_HOURS = 6; // 4 hour candle.
    ONE_DAY = 7; // 1 day candle.
}

message CandleInternal {
    string symbol = 1;
    google.protobuf.Timestamp timestamp = 2;
    uint64 open = 3;
    uint64 high = 4;
    uint64 low = 5;
    uint64 close = 6;
    uint64 volume = 7;
    uint64 period = 8; // in seconds
}

message DayMarketHours {
    string open = 1;
    string close = 2;
}

message MarketHours {
    string tz = 1;
    DayMarketHours monday = 2;
    DayMarketHours tuesday = 3;
    DayMarketHours wednesday = 4;
    DayMarketHours thursday = 5;
    DayMarketHours friday = 6;
    DayMarketHours saturday = 7;
    DayMarketHours sunday = 8;
}

message SymbolRequest {
    string symbol = 1;
}
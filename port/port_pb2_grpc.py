# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from common import common_pb2 as common__pb2
from port import port_pb2 as port__pb2

GRPC_GENERATED_VERSION = '1.70.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in port_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class PortServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StreamOrders = channel.stream_stream(
                '/port.PortService/StreamOrders',
                request_serializer=port__pb2.OrdersStreamRequest.SerializeToString,
                response_deserializer=port__pb2.OrderResponse.FromString,
                _registered_method=True)
        self.GetOrder = channel.unary_unary(
                '/port.PortService/GetOrder',
                request_serializer=port__pb2.GetOrderRequest.SerializeToString,
                response_deserializer=port__pb2.OrderResponse.FromString,
                _registered_method=True)
        self.GetUserOrders = channel.unary_unary(
                '/port.PortService/GetUserOrders',
                request_serializer=common__pb2.ListRequest.SerializeToString,
                response_deserializer=port__pb2.AllOrdersResponse.FromString,
                _registered_method=True)
        self.CancelAllOrders = channel.unary_unary(
                '/port.PortService/CancelAllOrders',
                request_serializer=port__pb2.CancelAllOrdersRequest.SerializeToString,
                response_deserializer=common__pb2.AckResponse.FromString,
                _registered_method=True)
        self.ReloadUsers = channel.unary_unary(
                '/port.PortService/ReloadUsers',
                request_serializer=common__pb2.Empty.SerializeToString,
                response_deserializer=common__pb2.AckResponse.FromString,
                _registered_method=True)
        self.GetUserTrades = channel.unary_unary(
                '/port.PortService/GetUserTrades',
                request_serializer=common__pb2.ListRequest.SerializeToString,
                response_deserializer=port__pb2.TradesPublic.FromString,
                _registered_method=True)
        self.GetUserPositions = channel.unary_stream(
                '/port.PortService/GetUserPositions',
                request_serializer=common__pb2.Empty.SerializeToString,
                response_deserializer=port__pb2.PositionsPublic.FromString,
                _registered_method=True)
        self.GetUserBalance = channel.unary_stream(
                '/port.PortService/GetUserBalance',
                request_serializer=common__pb2.Empty.SerializeToString,
                response_deserializer=port__pb2.BalancePublic.FromString,
                _registered_method=True)
        self.PnlLeaderboard = channel.unary_stream(
                '/port.PortService/PnlLeaderboard',
                request_serializer=common__pb2.Empty.SerializeToString,
                response_deserializer=port__pb2.UserBalancesPublic.FromString,
                _registered_method=True)
        self.GetAvailableLeverageLevels = channel.unary_unary(
                '/port.PortService/GetAvailableLeverageLevels',
                request_serializer=common__pb2.ListRequest.SerializeToString,
                response_deserializer=port__pb2.LeveragesPublic.FromString,
                _registered_method=True)
        self.GetUserLeverage = channel.unary_unary(
                '/port.PortService/GetUserLeverage',
                request_serializer=common__pb2.ListRequest.SerializeToString,
                response_deserializer=port__pb2.LeveragesPublic.FromString,
                _registered_method=True)
        self.SetUserLeverage = channel.unary_unary(
                '/port.PortService/SetUserLeverage',
                request_serializer=port__pb2.SetLeverageRequest.SerializeToString,
                response_deserializer=common__pb2.AckResponse.FromString,
                _registered_method=True)
        self.DepositFunds = channel.unary_unary(
                '/port.PortService/DepositFunds',
                request_serializer=port__pb2.DepositRequest.SerializeToString,
                response_deserializer=common__pb2.AckResponse.FromString,
                _registered_method=True)


class PortServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StreamOrders(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOrder(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserOrders(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelAllOrders(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReloadUsers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserTrades(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserPositions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserBalance(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PnlLeaderboard(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAvailableLeverageLevels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserLeverage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetUserLeverage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DepositFunds(self, request, context):
        """Superuser methods. These require superuser privileges.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PortServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StreamOrders': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamOrders,
                    request_deserializer=port__pb2.OrdersStreamRequest.FromString,
                    response_serializer=port__pb2.OrderResponse.SerializeToString,
            ),
            'GetOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOrder,
                    request_deserializer=port__pb2.GetOrderRequest.FromString,
                    response_serializer=port__pb2.OrderResponse.SerializeToString,
            ),
            'GetUserOrders': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserOrders,
                    request_deserializer=common__pb2.ListRequest.FromString,
                    response_serializer=port__pb2.AllOrdersResponse.SerializeToString,
            ),
            'CancelAllOrders': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelAllOrders,
                    request_deserializer=port__pb2.CancelAllOrdersRequest.FromString,
                    response_serializer=common__pb2.AckResponse.SerializeToString,
            ),
            'ReloadUsers': grpc.unary_unary_rpc_method_handler(
                    servicer.ReloadUsers,
                    request_deserializer=common__pb2.Empty.FromString,
                    response_serializer=common__pb2.AckResponse.SerializeToString,
            ),
            'GetUserTrades': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserTrades,
                    request_deserializer=common__pb2.ListRequest.FromString,
                    response_serializer=port__pb2.TradesPublic.SerializeToString,
            ),
            'GetUserPositions': grpc.unary_stream_rpc_method_handler(
                    servicer.GetUserPositions,
                    request_deserializer=common__pb2.Empty.FromString,
                    response_serializer=port__pb2.PositionsPublic.SerializeToString,
            ),
            'GetUserBalance': grpc.unary_stream_rpc_method_handler(
                    servicer.GetUserBalance,
                    request_deserializer=common__pb2.Empty.FromString,
                    response_serializer=port__pb2.BalancePublic.SerializeToString,
            ),
            'PnlLeaderboard': grpc.unary_stream_rpc_method_handler(
                    servicer.PnlLeaderboard,
                    request_deserializer=common__pb2.Empty.FromString,
                    response_serializer=port__pb2.UserBalancesPublic.SerializeToString,
            ),
            'GetAvailableLeverageLevels': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAvailableLeverageLevels,
                    request_deserializer=common__pb2.ListRequest.FromString,
                    response_serializer=port__pb2.LeveragesPublic.SerializeToString,
            ),
            'GetUserLeverage': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserLeverage,
                    request_deserializer=common__pb2.ListRequest.FromString,
                    response_serializer=port__pb2.LeveragesPublic.SerializeToString,
            ),
            'SetUserLeverage': grpc.unary_unary_rpc_method_handler(
                    servicer.SetUserLeverage,
                    request_deserializer=port__pb2.SetLeverageRequest.FromString,
                    response_serializer=common__pb2.AckResponse.SerializeToString,
            ),
            'DepositFunds': grpc.unary_unary_rpc_method_handler(
                    servicer.DepositFunds,
                    request_deserializer=port__pb2.DepositRequest.FromString,
                    response_serializer=common__pb2.AckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'port.PortService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('port.PortService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class PortService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StreamOrders(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/port.PortService/StreamOrders',
            port__pb2.OrdersStreamRequest.SerializeToString,
            port__pb2.OrderResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/port.PortService/GetOrder',
            port__pb2.GetOrderRequest.SerializeToString,
            port__pb2.OrderResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUserOrders(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/port.PortService/GetUserOrders',
            common__pb2.ListRequest.SerializeToString,
            port__pb2.AllOrdersResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CancelAllOrders(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/port.PortService/CancelAllOrders',
            port__pb2.CancelAllOrdersRequest.SerializeToString,
            common__pb2.AckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReloadUsers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/port.PortService/ReloadUsers',
            common__pb2.Empty.SerializeToString,
            common__pb2.AckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUserTrades(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/port.PortService/GetUserTrades',
            common__pb2.ListRequest.SerializeToString,
            port__pb2.TradesPublic.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUserPositions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/port.PortService/GetUserPositions',
            common__pb2.Empty.SerializeToString,
            port__pb2.PositionsPublic.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUserBalance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/port.PortService/GetUserBalance',
            common__pb2.Empty.SerializeToString,
            port__pb2.BalancePublic.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PnlLeaderboard(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/port.PortService/PnlLeaderboard',
            common__pb2.Empty.SerializeToString,
            port__pb2.UserBalancesPublic.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAvailableLeverageLevels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/port.PortService/GetAvailableLeverageLevels',
            common__pb2.ListRequest.SerializeToString,
            port__pb2.LeveragesPublic.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUserLeverage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/port.PortService/GetUserLeverage',
            common__pb2.ListRequest.SerializeToString,
            port__pb2.LeveragesPublic.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetUserLeverage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/port.PortService/SetUserLeverage',
            port__pb2.SetLeverageRequest.SerializeToString,
            common__pb2.AckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DepositFunds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/port.PortService/DepositFunds',
            port__pb2.DepositRequest.SerializeToString,
            common__pb2.AckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: port.proto

package port

import (
	context "context"
	common "github.com/QFEX-org/proto/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PortService_StreamOrders_FullMethodName               = "/port.PortService/StreamOrders"
	PortService_GetOrder_FullMethodName                   = "/port.PortService/GetOrder"
	PortService_GetUserOrders_FullMethodName              = "/port.PortService/GetUserOrders"
	PortService_CancelAllOrders_FullMethodName            = "/port.PortService/CancelAllOrders"
	PortService_ReloadUsers_FullMethodName                = "/port.PortService/ReloadUsers"
	PortService_GetUserTrades_FullMethodName              = "/port.PortService/GetUserTrades"
	PortService_GetUserPositions_FullMethodName           = "/port.PortService/GetUserPositions"
	PortService_GetUserBalance_FullMethodName             = "/port.PortService/GetUserBalance"
	PortService_PnlLeaderboard_FullMethodName             = "/port.PortService/PnlLeaderboard"
	PortService_GetAvailableLeverageLevels_FullMethodName = "/port.PortService/GetAvailableLeverageLevels"
	PortService_GetUserLeverage_FullMethodName            = "/port.PortService/GetUserLeverage"
	PortService_SetUserLeverage_FullMethodName            = "/port.PortService/SetUserLeverage"
	PortService_DepositFunds_FullMethodName               = "/port.PortService/DepositFunds"
)

// PortServiceClient is the client API for PortService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PortServiceClient interface {
	StreamOrders(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[OrdersStreamRequest, OrderResponse], error)
	GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*OrderResponse, error)
	GetUserOrders(ctx context.Context, in *common.ListRequest, opts ...grpc.CallOption) (*AllOrdersResponse, error)
	CancelAllOrders(ctx context.Context, in *CancelAllOrdersRequest, opts ...grpc.CallOption) (*common.AckResponse, error)
	ReloadUsers(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*common.AckResponse, error)
	GetUserTrades(ctx context.Context, in *common.ListRequest, opts ...grpc.CallOption) (*TradesPublic, error)
	GetUserPositions(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PositionsPublic], error)
	GetUserBalance(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BalancePublic], error)
	PnlLeaderboard(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[UserBalancesPublic], error)
	GetAvailableLeverageLevels(ctx context.Context, in *common.ListRequest, opts ...grpc.CallOption) (*LeveragesPublic, error)
	GetUserLeverage(ctx context.Context, in *common.ListRequest, opts ...grpc.CallOption) (*LeveragesPublic, error)
	SetUserLeverage(ctx context.Context, in *SetLeverageRequest, opts ...grpc.CallOption) (*common.AckResponse, error)
	// Superuser methods. These require superuser privileges.
	DepositFunds(ctx context.Context, in *DepositRequest, opts ...grpc.CallOption) (*common.AckResponse, error)
}

type portServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPortServiceClient(cc grpc.ClientConnInterface) PortServiceClient {
	return &portServiceClient{cc}
}

func (c *portServiceClient) StreamOrders(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[OrdersStreamRequest, OrderResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PortService_ServiceDesc.Streams[0], PortService_StreamOrders_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[OrdersStreamRequest, OrderResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PortService_StreamOrdersClient = grpc.BidiStreamingClient[OrdersStreamRequest, OrderResponse]

func (c *portServiceClient) GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*OrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, PortService_GetOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portServiceClient) GetUserOrders(ctx context.Context, in *common.ListRequest, opts ...grpc.CallOption) (*AllOrdersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AllOrdersResponse)
	err := c.cc.Invoke(ctx, PortService_GetUserOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portServiceClient) CancelAllOrders(ctx context.Context, in *CancelAllOrdersRequest, opts ...grpc.CallOption) (*common.AckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.AckResponse)
	err := c.cc.Invoke(ctx, PortService_CancelAllOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portServiceClient) ReloadUsers(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*common.AckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.AckResponse)
	err := c.cc.Invoke(ctx, PortService_ReloadUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portServiceClient) GetUserTrades(ctx context.Context, in *common.ListRequest, opts ...grpc.CallOption) (*TradesPublic, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TradesPublic)
	err := c.cc.Invoke(ctx, PortService_GetUserTrades_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portServiceClient) GetUserPositions(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PositionsPublic], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PortService_ServiceDesc.Streams[1], PortService_GetUserPositions_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[common.Empty, PositionsPublic]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PortService_GetUserPositionsClient = grpc.ServerStreamingClient[PositionsPublic]

func (c *portServiceClient) GetUserBalance(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BalancePublic], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PortService_ServiceDesc.Streams[2], PortService_GetUserBalance_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[common.Empty, BalancePublic]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PortService_GetUserBalanceClient = grpc.ServerStreamingClient[BalancePublic]

func (c *portServiceClient) PnlLeaderboard(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[UserBalancesPublic], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PortService_ServiceDesc.Streams[3], PortService_PnlLeaderboard_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[common.Empty, UserBalancesPublic]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PortService_PnlLeaderboardClient = grpc.ServerStreamingClient[UserBalancesPublic]

func (c *portServiceClient) GetAvailableLeverageLevels(ctx context.Context, in *common.ListRequest, opts ...grpc.CallOption) (*LeveragesPublic, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeveragesPublic)
	err := c.cc.Invoke(ctx, PortService_GetAvailableLeverageLevels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portServiceClient) GetUserLeverage(ctx context.Context, in *common.ListRequest, opts ...grpc.CallOption) (*LeveragesPublic, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeveragesPublic)
	err := c.cc.Invoke(ctx, PortService_GetUserLeverage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portServiceClient) SetUserLeverage(ctx context.Context, in *SetLeverageRequest, opts ...grpc.CallOption) (*common.AckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.AckResponse)
	err := c.cc.Invoke(ctx, PortService_SetUserLeverage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portServiceClient) DepositFunds(ctx context.Context, in *DepositRequest, opts ...grpc.CallOption) (*common.AckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.AckResponse)
	err := c.cc.Invoke(ctx, PortService_DepositFunds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PortServiceServer is the server API for PortService service.
// All implementations must embed UnimplementedPortServiceServer
// for forward compatibility.
type PortServiceServer interface {
	StreamOrders(grpc.BidiStreamingServer[OrdersStreamRequest, OrderResponse]) error
	GetOrder(context.Context, *GetOrderRequest) (*OrderResponse, error)
	GetUserOrders(context.Context, *common.ListRequest) (*AllOrdersResponse, error)
	CancelAllOrders(context.Context, *CancelAllOrdersRequest) (*common.AckResponse, error)
	ReloadUsers(context.Context, *common.Empty) (*common.AckResponse, error)
	GetUserTrades(context.Context, *common.ListRequest) (*TradesPublic, error)
	GetUserPositions(*common.Empty, grpc.ServerStreamingServer[PositionsPublic]) error
	GetUserBalance(*common.Empty, grpc.ServerStreamingServer[BalancePublic]) error
	PnlLeaderboard(*common.Empty, grpc.ServerStreamingServer[UserBalancesPublic]) error
	GetAvailableLeverageLevels(context.Context, *common.ListRequest) (*LeveragesPublic, error)
	GetUserLeverage(context.Context, *common.ListRequest) (*LeveragesPublic, error)
	SetUserLeverage(context.Context, *SetLeverageRequest) (*common.AckResponse, error)
	// Superuser methods. These require superuser privileges.
	DepositFunds(context.Context, *DepositRequest) (*common.AckResponse, error)
	mustEmbedUnimplementedPortServiceServer()
}

// UnimplementedPortServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPortServiceServer struct{}

func (UnimplementedPortServiceServer) StreamOrders(grpc.BidiStreamingServer[OrdersStreamRequest, OrderResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamOrders not implemented")
}
func (UnimplementedPortServiceServer) GetOrder(context.Context, *GetOrderRequest) (*OrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (UnimplementedPortServiceServer) GetUserOrders(context.Context, *common.ListRequest) (*AllOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserOrders not implemented")
}
func (UnimplementedPortServiceServer) CancelAllOrders(context.Context, *CancelAllOrdersRequest) (*common.AckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelAllOrders not implemented")
}
func (UnimplementedPortServiceServer) ReloadUsers(context.Context, *common.Empty) (*common.AckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReloadUsers not implemented")
}
func (UnimplementedPortServiceServer) GetUserTrades(context.Context, *common.ListRequest) (*TradesPublic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserTrades not implemented")
}
func (UnimplementedPortServiceServer) GetUserPositions(*common.Empty, grpc.ServerStreamingServer[PositionsPublic]) error {
	return status.Errorf(codes.Unimplemented, "method GetUserPositions not implemented")
}
func (UnimplementedPortServiceServer) GetUserBalance(*common.Empty, grpc.ServerStreamingServer[BalancePublic]) error {
	return status.Errorf(codes.Unimplemented, "method GetUserBalance not implemented")
}
func (UnimplementedPortServiceServer) PnlLeaderboard(*common.Empty, grpc.ServerStreamingServer[UserBalancesPublic]) error {
	return status.Errorf(codes.Unimplemented, "method PnlLeaderboard not implemented")
}
func (UnimplementedPortServiceServer) GetAvailableLeverageLevels(context.Context, *common.ListRequest) (*LeveragesPublic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableLeverageLevels not implemented")
}
func (UnimplementedPortServiceServer) GetUserLeverage(context.Context, *common.ListRequest) (*LeveragesPublic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserLeverage not implemented")
}
func (UnimplementedPortServiceServer) SetUserLeverage(context.Context, *SetLeverageRequest) (*common.AckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserLeverage not implemented")
}
func (UnimplementedPortServiceServer) DepositFunds(context.Context, *DepositRequest) (*common.AckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositFunds not implemented")
}
func (UnimplementedPortServiceServer) mustEmbedUnimplementedPortServiceServer() {}
func (UnimplementedPortServiceServer) testEmbeddedByValue()                     {}

// UnsafePortServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PortServiceServer will
// result in compilation errors.
type UnsafePortServiceServer interface {
	mustEmbedUnimplementedPortServiceServer()
}

func RegisterPortServiceServer(s grpc.ServiceRegistrar, srv PortServiceServer) {
	// If the following call pancis, it indicates UnimplementedPortServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PortService_ServiceDesc, srv)
}

func _PortService_StreamOrders_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PortServiceServer).StreamOrders(&grpc.GenericServerStream[OrdersStreamRequest, OrderResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PortService_StreamOrdersServer = grpc.BidiStreamingServer[OrdersStreamRequest, OrderResponse]

func _PortService_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServiceServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortService_GetOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServiceServer).GetOrder(ctx, req.(*GetOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortService_GetUserOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServiceServer).GetUserOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortService_GetUserOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServiceServer).GetUserOrders(ctx, req.(*common.ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortService_CancelAllOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelAllOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServiceServer).CancelAllOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortService_CancelAllOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServiceServer).CancelAllOrders(ctx, req.(*CancelAllOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortService_ReloadUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServiceServer).ReloadUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortService_ReloadUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServiceServer).ReloadUsers(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortService_GetUserTrades_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServiceServer).GetUserTrades(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortService_GetUserTrades_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServiceServer).GetUserTrades(ctx, req.(*common.ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortService_GetUserPositions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(common.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PortServiceServer).GetUserPositions(m, &grpc.GenericServerStream[common.Empty, PositionsPublic]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PortService_GetUserPositionsServer = grpc.ServerStreamingServer[PositionsPublic]

func _PortService_GetUserBalance_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(common.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PortServiceServer).GetUserBalance(m, &grpc.GenericServerStream[common.Empty, BalancePublic]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PortService_GetUserBalanceServer = grpc.ServerStreamingServer[BalancePublic]

func _PortService_PnlLeaderboard_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(common.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PortServiceServer).PnlLeaderboard(m, &grpc.GenericServerStream[common.Empty, UserBalancesPublic]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PortService_PnlLeaderboardServer = grpc.ServerStreamingServer[UserBalancesPublic]

func _PortService_GetAvailableLeverageLevels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServiceServer).GetAvailableLeverageLevels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortService_GetAvailableLeverageLevels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServiceServer).GetAvailableLeverageLevels(ctx, req.(*common.ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortService_GetUserLeverage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServiceServer).GetUserLeverage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortService_GetUserLeverage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServiceServer).GetUserLeverage(ctx, req.(*common.ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortService_SetUserLeverage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLeverageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServiceServer).SetUserLeverage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortService_SetUserLeverage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServiceServer).SetUserLeverage(ctx, req.(*SetLeverageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortService_DepositFunds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServiceServer).DepositFunds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortService_DepositFunds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServiceServer).DepositFunds(ctx, req.(*DepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PortService_ServiceDesc is the grpc.ServiceDesc for PortService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PortService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "port.PortService",
	HandlerType: (*PortServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrder",
			Handler:    _PortService_GetOrder_Handler,
		},
		{
			MethodName: "GetUserOrders",
			Handler:    _PortService_GetUserOrders_Handler,
		},
		{
			MethodName: "CancelAllOrders",
			Handler:    _PortService_CancelAllOrders_Handler,
		},
		{
			MethodName: "ReloadUsers",
			Handler:    _PortService_ReloadUsers_Handler,
		},
		{
			MethodName: "GetUserTrades",
			Handler:    _PortService_GetUserTrades_Handler,
		},
		{
			MethodName: "GetAvailableLeverageLevels",
			Handler:    _PortService_GetAvailableLeverageLevels_Handler,
		},
		{
			MethodName: "GetUserLeverage",
			Handler:    _PortService_GetUserLeverage_Handler,
		},
		{
			MethodName: "SetUserLeverage",
			Handler:    _PortService_SetUserLeverage_Handler,
		},
		{
			MethodName: "DepositFunds",
			Handler:    _PortService_DepositFunds_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamOrders",
			Handler:       _PortService_StreamOrders_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetUserPositions",
			Handler:       _PortService_GetUserPositions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetUserBalance",
			Handler:       _PortService_GetUserBalance_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PnlLeaderboard",
			Handler:       _PortService_PnlLeaderboard_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "port.proto",
}
